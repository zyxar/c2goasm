package main

import (
	"bufio"
	"encoding/hex"
	"fmt"
	"log"
	"os"
	"regexp"
	"strings"
)

// readLines reads a whole file into memory
// and returns a slice of its lines.
func readLines(path string) ([]string, error) {
	file, err := os.Open(path)
	if err != nil {
		return nil, err
	}
	defer file.Close()

	var lines []string
	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		lines = append(lines, scanner.Text())
	}
	return lines, scanner.Err()
}

// writeLines writes the lines to the given file.
func writeLines(lines []string, path string, header bool) error {
	file, err := os.Create(path)
	if err != nil {
		return err
	}
	defer file.Close()

	w := bufio.NewWriter(file)
	if header {
		fmt.Fprintln(w, "//+build !noasm !appengine")
		fmt.Fprintln(w, "// AUTO-GENERATED BY GOASMC -- DO NOT EDIT")
		fmt.Fprintln(w, "")
	}
	for _, line := range lines {
		fmt.Fprintln(w, line)
	}
	return w.Flush()
}

func reverseBytes(hex string) string {
	result := ""
	for i := len(hex) - 2; i >= 0; i -= 2 {
		result = result + hex[i:i+2]
	}
	return result
}

func compactArray(opcodes []byte) []string {
	var result []string
	dst := make([]byte, hex.EncodedLen(len(opcodes)))
	hex.Encode(dst, opcodes)

	q := 0
	for ; q+31 < len(dst); q += 32 {
		result = append(result, fmt.Sprintf("    QUAD $0x%s; QUAD $0x%s", reverseBytes(string(dst[q:q+16])), reverseBytes(string(dst[q+16:q+32]))))
	}
	for ; q+15 < len(dst); q += 16 {
		result = append(result, fmt.Sprintf("    QUAD $0x%s", reverseBytes(string(dst[q:q+16]))))
	}
	if q < len(dst) {
		last := ""
		l := 0
		if q+7 < len(dst) {
			last += fmt.Sprintf("LONG $0x%s", reverseBytes(string(dst[q:q+8])))
			l = 8
		}
		w := 0
		if q+l+3 < len(dst) {
			if len(last) > 0 {
				last = last + "; "
			}
			last += fmt.Sprintf("WORD $0x%s", reverseBytes(string(dst[q+l:q+l+4])))
			w = 4
		}
		if q+l+w+1 < len(dst) {
			if len(last) > 0 {
				last = last + "; "
			}
			last += fmt.Sprintf("BYTE $0x%s", dst[q+l+w:q+l+w+2])
		}
		result = append(result, "    "+last)
	}
	return result
}

func compactOpcodes(file string) {
	lines, err := readLines(file)
	if err != nil {
		log.Fatalf("readLines: %s", err)
	}
	var result []string
	opcodes := make([]byte, 0, 1000)
	hexMatch := regexp.MustCompile(`(\$0x[0-9a-f]+)`)
	for _, l := range lines {
		if strings.Contains(l, "LONG") || strings.Contains(l, "WORD") || strings.Contains(l, "BYTE") {
			match := hexMatch.FindAllStringSubmatch(l, -1)
			for _, m := range match {
				dst := make([]byte, hex.DecodedLen(len(m[0][3:])))
				_, err := hex.Decode(dst, []byte(m[0][3:]))
				if err != nil {
					log.Fatal(err)
				}
				for i := len(dst) - 1; i >= 0; i -= 1 { // append starting with lowest byte first
					opcodes = append(opcodes, dst[i:i+1]...)
				}
			}
		} else {
			if len(opcodes) != 0 {
				result = append(result, compactArray(opcodes)...)
				opcodes = opcodes[:0]
			}

			result = append(result, l)
		}
	}
	err = writeLines(result, file, false)
	if err != nil {
		log.Fatalf("writeLines: %s", err)
	}
}

func stripGoasmComments(file string) {
	lines, err := readLines(file)
	if err != nil {
		log.Fatalf("readLines: %s", err)
	}
	for i, l := range lines {
		if strings.Contains(l, "LONG") || strings.Contains(l, "WORD") || strings.Contains(l, "BYTE") {
			opcode := strings.TrimSpace(strings.SplitN(l, "//", 2)[0])
			lines[i] = strings.SplitN(l, opcode, 2)[0] + opcode
		}
	}
	err = writeLines(lines, file, false)
	if err != nil {
		log.Fatalf("writeLines: %s", err)
	}
}
